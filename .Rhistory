levels(fdata$emp) <- c("Out of workforce", "In workforce")
fdata$emp <- as.numeric(fdata$emp)
# Banks account
summary(fdata$account)
fdata$account = as.integer(fdata$account)
fdata$account[fdata$account == "3"]<- NA
fdata$account[fdata$account == "4"]<- NA
fdata$account[fdata$account == "2"]<- 0
fdata$account <- factor(fdata$account)
levels(fdata$account) <- c("No account", "Have account")
fdata$account <- as.numeric(fdata$account)
# A combination of  fin11a-fin11h to a variable together
fdata$fin11 <- ifelse(fdata$fin11a == 1 |
fdata$fin11b == 1 |
fdata$fin11c == 1 |
fdata$fin11d == 1 |
fdata$fin11e == 1 |
fdata$fin11f == 1 |
fdata$fin11g == 1 |
fdata$fin11h == 1, 1, 0)
# Remove fin11a-fin11h
fdata <- subset(fdata,
select = -c(fin11a:fin11h))
# Saving
fdata$saving = as.integer(fdata$saving)
fdata$saving[fdata$saving == "3"]<- NA
fdata$saving[fdata$saving == "4"]<- NA
fdata$saving[fdata$saving == "2"]<- 0
fdata$saving <- factor(fdata$saving)
levels(fdata$saving) <- c("No", "Yes")
fdata$saving <- as.numeric(fdata$saving)
summary(fdata$saving)
# Borrowed
fdata$borrowed = as.integer(fdata$borrowed)
fdata$borrowed[fdata$borrowed == "3"]<- NA
fdata$borrowed[fdata$borrowed == "4"]<- NA
fdata$borrowed[fdata$borrowed == "2"]<- 0
fdata$borrowed <- factor(fdata$borrowed)
levels(fdata$borrowed) <- c("No", "Yes")
fdata$borrowed <- as.numeric(fdata$borrowed)
summary(fdata$borrowed)
# Financial Sources
fdata$finsources = as.integer(fdata$finsources)
fdata$finsources[fdata$finsources == "7"]<- NA
fdata$finsources[fdata$finsources == "8"]<- NA
fdata$finsources <- factor(fdata$finsources)
levels(fdata$finsources) <- c("Savings", "Family or friends", "Money from Working",
"A bank, employer, or private lender",
"Selling assets", "Some other sources")
fdata$finsources <- as.numeric(fdata$finsources)
summary(fdata$finsources)
# ------------------------------------------------------------------------------
final <- na.omit(fdata)
p <-  ggplot(data = fdata,
mapping = aes(x = saving,
y = gender,
color = purple))
p <-  ggplot(data = fdata,
mapping = aes(x = account,
y = saving,
color = purple))
p <-  ggplot(data = fdata,
mapping = aes(x = account,
y = saving,
color = purple))
p <-  ggplot(data = fdata,
mapping = aes(x = account,
y = age,
color = purple))
plot(fdata$age, fdata$account)
plot(fdata$saving, fdata$account)
ggplot(fdata,
aes(x = finsources, color = Course)) +
geom_step(aes(y = ..y..), stat = "ecdf") +
labs(y = "Cumulative Density") +
scale_x_discrete(limits = c("1","2","3","4","5", "6"),
breaks = c(1,2,3,4,5, 6),
labels=c("Savings", "Family or friends", "Money from Working",
"A bank, employer, or private lender",
"Selling assets", "Some other sources")) +
scale_colour_manual(values = clrs3) +
theme_bw()
ggplot(fdata,
aes(x = finsources, color = Course)) +
geom_step(aes(y = ..y..), stat = "ecdf") +
labs(y = "Cumulative Density") +
scale_x_discrete(limits = c("1","2","3","4","5", "6"),
breaks = c(1,2,3,4,5, 6),
labels=c("Savings", "Family or friends", "Money from Working",
"A bank, employer, or private lender",
"Selling assets", "Some other sources"))
ggplot(fdata,
aes(x = finsources)) +
geom_step(aes(y = ..y..), stat = "ecdf") +
labs(y = "Cumulative Density") +
scale_x_discrete(limits = c("1","2","3","4","5", "6"),
breaks = c(1,2,3,4,5, 6),
labels=c("Savings", "Family or friends", "Money from Working",
"A bank, employer, or private lender",
"Selling assets", "Some other sources"))
library(gapminder)
library(tidyverse)
library(here)
library(tidyverse)
library(socviz)
gapminder
p <- ggplot(data = gapminder)
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))
p <- ggplot(data = gapminder)
p <- ggplot(data = fdata)
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))
p
p + geom_point()
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y=lifeExp))
p + geom_smooth()
p + geom_smooth()
p <- ggplot(data = fdata)
p <- ggplot(data = fdata,
mapping = aes(x = inc,
y=account))
p + geom_smooth()
### Starter script for analyzing the Eurobarometer Trend data (1970-2002).
### Important: For this script to work, make sure to first set your working directory
### to a directory containing the Eurobarometer Trend dataset,
### named "eurobarometer_trends.dta." You can obtain this from their website or download
### the data file here: https://www.dropbox.com/s/5bdhel8l7c5r59z/eurobarometer_trends.dta?dl=0
### Outline:
### 1. Identify variables of interest and clean them up
### 2. Estimate a regression model of what makes people turnout for EP elections
### Download packages we're going to use
# install.packages("ggplot2")
# install.packages("foreign")
library(ggplot2)
library(reshape2)
library(foreign)
### Read the dataset straight from the web, name the dataframe "data"
data <- read.dta("Data/eurobarometer_trends.dta")
### Variable "mediause" asks how much the respondent relies on the media.
summary(data$mediause) # Get a simple summary
data$mediause[data$mediause=="dk"]<-NA # Let's consider all the "dk" answerers as missing (NA)
data$mediause[data$mediause=="na"]<-NA # Let's consider all the "dk" as missing (NA)
data$mediause[data$mediause=="inap"]<-NA # Let's consider all the "inap" as missing (NA)
data$mediause<-factor(data$mediause) # this removes unused levels
levels(data$mediause)<-c("Very high", "High", "Low", "Very low") # Clean up the messy names of the levels
data$medianum<-as.numeric(data$mediause) # convert the categories to a numerical scale (cheating a bit!)
data$medianum<-(4 - data$medianum) # Subtract from 4 to make it more intuitive (higher number = more likely to vote)
### Variable "particip" asks respondent how likely they are to vote in the EP elections.
summary(data$particip)
data$particip[data$particip=="DK,NA"]<-NA
data$particip[data$particip=="depends"]<-NA
data$particip[data$particip=="inap"]<-NA
data$particip<-factor(data$particip)
levels(data$particip)<-c("Certainly yes", "Probably yes", "Probably not", "Certainly not")
data$participnum<-as.numeric(data$particip) # convert the categories to a numerical scale (cheating a bit!)
data$participnum<-(4 - data$participnum) # Subtract from 4 to make it more intuitive (higher number = more likely to vote)
summary(data$participnum)
### Variable "income" asks the respondent's income level.
summary(data$income)
### Variable "polint" asks the respondent's political interest generally.
summary(data$polint)
data$polint[data$polint=="DK,NA"]<-NA
data$polint[data$polint=="inap"]<-NA
data$polint<-factor(data$polint)
levels(data$polint)<-c("A great deal", "To some extent", "Not much", "Not at all")
data$polintnum<-as.numeric(data$polint) # convert the categories to a numerical scale (cheating a bit!)
data$polintnum<-(4 - data$polintnum) # Subtract from 4 to make it more intuitive (higher number = more likely to vote)
summary(data$polintnum)
### Variable "ecint3" asks the respondent's interest in EU politics.
summary(data$ecint3)
data$ecint3[data$ecint3=="DK, NA"]<-NA
data$ecint3[data$ecint3=="inap"]<-NA
data$ecint3<-factor(data$ecint3)
levels(data$ecint3)<-c("Very interested", "A little", "Not at all")
data$ecint3num<-as.numeric(data$ecint3) # convert the categories to a numerical scale (cheating a bit!)
data$ecint3num<-(3 - data$ecint3num) # Subtract from 4 to make it more intuitive (higher number = more likely to vote)
summary(data$ecint3num)
### Variable "ecint4" asks the respondent's interest in EU politics.
summary(data$ecint4)
data$ecint4[data$ecint4=="DK, NA"]<-NA
data$ecint4[data$ecint4=="inap"]<-NA
data$ecint4<-factor(data$ecint4)
levels(data$ecint4)<-c("A great deal", "To some extent", "Not much", "Not at all")
data$ecint4num<-as.numeric(data$ecint4) # convert the categories to a numerical scale (cheating a bit!)
data$ecint4num<-(4 - data$ecint4num) # Subtract from 4 to make it more intuitive (higher number = more likely to vote)
summary(data$ecint4num)
### Variable "relimp" asks the respondent's importance given to religion.
summary(data$relimp)
data$relimp[data$relimp=="DK,NA"]<-NA
data$relimp[data$relimp=="inap"]<-NA
data$relimp<-factor(data$relimp)
levels(data$relimp)<-c("Great", "Some", "Little")
summary(data$relimp)
data$relimpnum<-as.numeric(data$relimp) # convert the categories to a numerical scale (cheating a bit!)
data$relimpnum<-(3 - data$relimpnum) # Subtract from 4 to make it more intuitive (higher number = more likely to vote)
summary(data$relimpnum)
### Variable "nation1" captures the respondent's nation
summary(data$nation1)
### Make a subset for Great Britain only
gb<-subset(data, nation1=="GREAT BRITAIN")
### Variable "year" captures the year of the survey
summary(data$year)
### Convert country names to all caps for when we plot
data$nation1<-toupper(data$nation1)
### Aggregate the data at the country-year level
agg<-data[c("relimpnum", "nation1", "year")] # make a subset with only the religion variable
# Aggregate the mean importance of religion for each country in each year
attach(agg)
agg<-aggregate(relimpnum, by=list(nation1, year), FUN=mean, na.rm=TRUE)
detach(agg)
# Melt the data with nation and year as id variables (aggregate names them Group1 and Group2)
all.molten <- melt(agg,
id = c("Group.1", "Group.2"), na.rm=TRUE)
# Plot
ggplot(all.molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
# Re-plot cleaning things up
ggplot(subset(all.molten, Group.1!=c("PORTUGAL", "SPAIN"))) + # removing Portugal and Spain because they have no observations
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1) +
labs(x="Year", y="Importance of Religion",
title="Religion in European Countries, 1972-2002") + # Clean up axes and add a title
theme(legend.position="none") # hide legend because there is only one
### Estimate a regression model of intention to turnout in Great Britain
model<-lm(participnum ~ income + polintnum + medianum + year, data=gb)
summary(model)
summary(data$nation1)
summary(data$relimpnum)
summary(data$mediause) # Get a simple summary
summary(data$participnum)
summary(data$income)
summary(data$polintnum)
summary(data$ecint3num)
summary(data$ecint4num)
summary(data$relimp)
summary(data$relimpnum)
summary(data$nation1)
gb<-subset(data, nation1=="GREAT BRITAIN")
View(gb)
summary(data$year)
data$nation1<-toupper(data$nation1)
data$nation1
agg<-data[c("relimpnum", "nation1", "year")] # make a subset with only the religion variable
View(agg)
agg$relimpnum
summary(agg$relimpnum)
detach(agg)
View(agg)
library(tidyverse)
library(tidyr)
library(haven)
library(sjlabelled)
library(reshape2)
library(foreign)
library(dplyr)
# Import the data from the Stata, SPSS, and SAS file with `haven` package
findata <- read_dta(file = "Data/micro_world.dta")
view(findata)
# Print the first ten rows of the dataset
findata
# Print the last six rows of the dataset
tail(findata)
# Print rows 11115, 22119, 91115, and 151115
findata[c(11115,22119,91115,151115),]
# Print number of rows in the column `fin2` and `fin5`
length(findata$fin2)
length(findata$fin5)
# Print number of rows and columns
dim(findata)
# Show the names of the variable
names(findata)
# filter() allows you to subset observations based on their values.
(fCambodia <- filter(findata, economy == "Cambodia"))
# Show label
get_label(findata)
# Now, we select some variables, genaral info: fin2 (Yes == 1, NO == 1, DK == 3,
# Refused == 4), unbanked:fin11a-fin11h, saving: fin15, borrowing: fin21
# (both saving and borrowing used for start, operate or grow a business or farm)
# and the main source of money that they come up: fin25.
fdata <- findata %>%
select(economy, regionwb:fin2, fin11a:fin11h, fin15, fin21, fin25)
fdata
# Rename variables
fdata <- fdata %>%
rename("country" = "economy", "region" = "regionwb", "pop" = "pop_adult",
"random" = "wpid_random", "gender" = "female", "inc" = "inc_q",
"emp" = "emp_in", "account" = "fin2", "saving" = "fin15",
"borrowed" = "fin21", "finsources" = "fin25")
)
names(fdata)
# Print data structure
str(fdata)
# Change data structure and its value
# Gender
fdata$gender
fdata$gender = as.character(fdata$gender)
fdata$gender[fdata$gender == 2]<- "Female"
fdata$gender[fdata$gender == 1]<- "Male"
fdata$gender<-factor(fdata$gender) # this removes unused levels
levels(fdata$gender)<-c("Female", "Male") # Clean up the messy names of the levels
fdata$gender<- as.numeric(fdata$gender) # convert the categories to a numerical scale (cheating a bit!)
class(fdata$gender)
summary(fdata$gender)
# Education levels
summary(fdata$educ) # Get a simple summary
#fdata$educ = as.integer(fdata$educ)
fdata$educ[fdata$educ == "4"]<- NA # Let's consider all the "4" as missing (NA)
fdata$educ[fdata$educ == "5"]<- NA # Let's consider all the "5" as missing (NA)
fdata$educ<-factor(fdata$educ) # this removes unused levels
levels(fdata$educ)<-c("Completed primary or less", "secondary",
"completed tertiary or more") # Clean up the messy names of the levels
fdata$educ<- as.numeric(fdata$educ) # convert the categories to a numerical scale (cheating a bit!)
summary(fdata$educ)
# Income levels
class(fdata$inc)
summary(fdata$inc) # Get a simple summary
fdata$inc = as.integer(fdata$inc)
fdata$inc <- factor(fdata$inc) # this removes unused levels
levels(fdata$inc) <- c("Poorest", "Second", "Middle", "Fourth", "Richest")
fdata$inc <- as.numeric(fdata$inc)
summary(fdata$educ)
# Employment
summary(fdata$emp)
fdata$emp = as.integer(fdata$emp)
fdata$emp <- factor(fdata$emp) # this removes unused levels
levels(fdata$emp) <- c("Out of workforce", "In workforce")
fdata$emp <- as.numeric(fdata$emp)
# Banks account
summary(fdata$account)
fdata$account = as.integer(fdata$account)
fdata$account[fdata$account == "3"]<- NA
fdata$account[fdata$account == "4"]<- NA
fdata$account[fdata$account == "2"]<- 0
fdata$account <- factor(fdata$account)
levels(fdata$account) <- c("No account", "Have account")
fdata$account <- as.numeric(fdata$account)
# A combination of  fin11a-fin11h to a variable together
fdata$fin11 <- ifelse(fdata$fin11a == 1 |
fdata$fin11b == 1 |
fdata$fin11c == 1 |
fdata$fin11d == 1 |
fdata$fin11e == 1 |
fdata$fin11f == 1 |
fdata$fin11g == 1 |
fdata$fin11h == 1, 1, 0)
# Remove fin11a-fin11h
fdata <- subset(fdata,
select = -c(fin11a:fin11h))
# Saving
fdata$saving = as.integer(fdata$saving)
fdata$saving[fdata$saving == "3"]<- NA
fdata$saving[fdata$saving == "4"]<- NA
fdata$saving[fdata$saving == "2"]<- 0
fdata$saving <- factor(fdata$saving)
levels(fdata$saving) <- c("No", "Yes")
fdata$saving <- as.numeric(fdata$saving)
summary(fdata$saving)
# Borrowed
fdata$borrowed = as.integer(fdata$borrowed)
fdata$borrowed[fdata$borrowed == "3"]<- NA
fdata$borrowed[fdata$borrowed == "4"]<- NA
fdata$borrowed[fdata$borrowed == "2"]<- 0
fdata$borrowed <- factor(fdata$borrowed)
levels(fdata$borrowed) <- c("No", "Yes")
fdata$borrowed <- as.numeric(fdata$borrowed)
summary(fdata$borrowed)
# Financial Sources
fdata$finsources = as.integer(fdata$finsources)
fdata$finsources[fdata$finsources == "7"]<- NA
fdata$finsources[fdata$finsources == "8"]<- NA
fdata$finsources <- factor(fdata$finsources)
levels(fdata$finsources) <- c("Savings", "Family or friends", "Money from Working",
"A bank, employer, or private lender",
"Selling assets", "Some other sources")
fdata$finsources <- as.numeric(fdata$finsources)
summary(fdata$finsources)
# ------------------------------------------------------------------------------
# To remove all rows with NA values, we use na.omit() function.
final <- na.omit(fdata)
### Aggregate the data at the country-year level
agg<-fdata[c("account", "country", "age")] # make a subset with only the religion variable
ag <- fdata[c("account", "country", "age")] # make a subset with only the religion variable
View(ag)
summary(agg$relimpnum)
agg<-data[c("relimpnum", "nation1", "year")] # make a subset with only the religion variable
summary(agg$relimpnum)
attach(agg)
attach(ag)
ag <- aggregate(account, by=list(country, age), FUN=mean, na.rm=TRUE)
detach(agg)
View(ag)
all.molten <- melt(agg,
id = c("Group.1", "Group.2"), na.rm=TRUE)
attach(agg)
agg<-aggregate(relimpnum, by=list(nation1, year), FUN=mean, na.rm=TRUE)
detach(agg)
all.molten <- melt(agg,
id = c("Group.1", "Group.2"), na.rm=TRUE)
attach(ag)
ag <- aggregate(account, by=list(country, age), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(agg,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(all.molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
attach(ag)
ag <- aggregate(account, by=list(country, age), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(agg,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
ag <- fdata[c("account", "country", "age")] # make a subset with only the religion variable
attach(ag)
ag <- aggregate(account, by=list(country, age), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(agg,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
ag <- fdata[c("account", "country", "age")] # make a subset with only the religion variable
attach(ag)
ag <- aggregate(account, by=list(country, age), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(ag,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
ag <- fdata[c("account", "region", "age")] # make a subset with only the religion variable
attach(ag)
ag <- aggregate(account, by=list(region, age), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(ag,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
# Re-plot cleaning things up
ggplot(subset(all.molten, Group.1!=c("PORTUGAL", "SPAIN"))) + # removing Portugal and Spain because they have no observations
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1) +
labs(x="Year", y="Importance of Religion",
title="Religion in European Countries, 1972-2002") + # Clean up axes and add a title
theme(legend.position="none") # hide legend because there is only one
ag <- fdata[c("account", "region", "age")] # make a subset with only the religion variable
attach(ag)
ag <- aggregate(account, by=list(region, age), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(ag,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
ag <- fdata[c("educ", "region", "account")] # make a subset with only the religion variable
attach(ag)
ag <- aggregate(educ, by=list(region, account), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(ag,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
ag <- fdata[c("educ", "region", "age")] # make a subset with only the religion variable
attach(ag)
ag <- aggregate(educ, by=list(region, age), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(ag,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
ag <- fdata[c("educ", "country", "age")] # make a subset with only the religion variable
attach(ag)
ag <- aggregate(educ, by=list(country, age), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(ag,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
ag <- fdata[c("account", "country", "age")] # make a subset with only the religion variable
attach(ag)
ag <- aggregate(account, by=list(country, age), FUN=mean, na.rm=TRUE)
detach(agg)
molten <- melt(ag,
id = c("Group.1", "Group.2"), na.rm=TRUE)
ggplot(molten) +
geom_line(aes(x=Group.2, y=value, colour=variable)) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
facet_wrap(~Group.1)
